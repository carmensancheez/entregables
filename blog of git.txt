Git es el sistema de control de versiones moderno más utilizado del mundo,pensando en la eficiencia y la confiabilidad del mantenimiento de versiones de aplicaciones cuando éstas tienen un gran número de archivos de código fuente. Su propósito es llevar registro de los cambios en archivos de computadora y coordinar el trabajo que varias personas realizan sobre archivos compartidos.

Existen muchísimos comandos que podemos utilizar en git, aquí muestro los más comunes con una breve descripción: 

1) Creación de un repositorio.
git init

2) Clonar un repositorio.
git clone url

3) Añade todos los archivos para que sea incluido en el próximo commit.
git add --all
git add .

4) Hace commit a los archivos que agregamos anteriormente con git add.
git commit -m "mensaje" 

5) Crea una nuevo branch
git branch NombreDeBranch

6) Sirve para moverse entre branches, en este caso vamos al branch que indicamos en el comando. 
git checkout NombreDeBranch

7) Crea un nuevo branch y automaticamente GIT se cambia al branch creado, clonando el branch desde donde ejecutamos el comando. 
git checkout -b NombreDeBranch

8) Nos muestra una lista de los branches que existen en nuestro repositorio. 
git branch

9) Hace un merge entre dos branches, en este caso la dirección del merge sería entre el branch que indiquemos en el comando, y el branch donde estémos ubicados. 
git merge NombreDeBranch

10) Nos indica el estado del repositorio, por ejemplo cuales están modificados, cuales no están siendo seguidos por GIT, entre otras características. 
git status

11) Luego de que hicimos un git commit, si estamos trabajando remotamente, este comando va a subir los archivos al repositorio remoto, específicamente al branch que indiquemos. 
git push origin NombreDeBranch

12) Hace una actualización en nuestro branch local, desde un branch remoto que indicamos en el comando
git pull origin NombreDeBranch

13) Imprime un reporte del estado actual del árbol de trabajo local.
git status

14) Muestra la diferencia entre los cambios en el árbol de trabajo local.
git diff ruta

15) Muestra una lista de commits en una rama junto con todos los detalles
git log

Ahora hablemos un poco de gitflow...

GitFlow es un workflow y conjunto de extensiones para Git introducidos por Vincent Driessen con las que conseguiremos gestionar de manera eficiente las ramas en nuestros repositorios Git. GitFlow se basa en un conjunto de ramas que utilizaremos según el tipo de tarea que estemos llevando a cabo en nuestro proyecto y podemos clasificarlas en ramas principales y ramas de soporte.



